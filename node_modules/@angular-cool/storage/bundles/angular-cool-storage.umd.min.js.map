{
  "version": 3,
  "file": "angular-cool-storage.umd.min.js",
  "sources": [
    "ng://@angular-cool/storage/projects/storage/src/lib/cool-storage-base.ts",
    "ng://@angular-cool/storage/projects/storage/src/lib/cool-server-storage.ts",
    "ng://@angular-cool/storage/projects/storage/src/lib/cool-local-storage.ts",
    "ng://@angular-cool/storage/projects/storage/src/lib/cool-session-storage.ts",
    "ng://@angular-cool/storage/projects/storage/src/lib/cool-storage.module.ts"
  ],
  "sourcesContent": [
    "import { Observable, Subject } from 'rxjs';\nimport { StorageChangeArguments } from './storage-change-arguments.interface';\n\nexport abstract class CoolStorageBase {\n  private _storageObject: any;\n  private _itemSetSubject: Subject<StorageChangeArguments>;\n  private _itemRemovedSubject: Subject<StorageChangeArguments>;\n\n  protected constructor(storageObject: any, storageObjectName: string) {\n    if (!storageObject) {\n      throw new Error(`Current browser does not support ${ storageObjectName }`);\n    }\n\n    this._storageObject = storageObject;\n\n    this._itemSetSubject = new Subject<StorageChangeArguments>();\n    this._itemRemovedSubject = new Subject<StorageChangeArguments>();\n  }\n\n  public get itemSetObservable(): Observable<StorageChangeArguments> {\n    return this._itemSetSubject.asObservable();\n  }\n\n  public get itemRemovedObservable(): Observable<StorageChangeArguments> {\n    return this._itemRemovedSubject.asObservable();\n  }\n\n  public getItem(key: string): string {\n    return this._storageObject.getItem(key) || null;\n  }\n\n  public setItem(key: string, value: string): void {\n    this._itemSetSubject.next({\n      key,\n      value\n    });\n\n    this._setItemInStorage(key, value);\n  }\n\n  public removeItem(key: string): void {\n    let currentValue = this.tryGetObject(key);\n\n    if (!currentValue) {\n      currentValue = this.getItem(key);\n    }\n\n    this._itemRemovedSubject.next({\n      key,\n      value: currentValue\n    });\n\n    this._storageObject.removeItem(key);\n  }\n\n  public key(index: number): string {\n    return this._storageObject.key(index);\n  }\n\n  public clear(): void {\n    this._storageObject.clear();\n  }\n\n  public get length(): number {\n    return this._storageObject.length;\n  }\n\n  public getObject<T>(key: string): T {\n    let jsonInStorage = this.getItem(key);\n\n    if (jsonInStorage === null) {\n      return null;\n    }\n\n    return JSON.parse(jsonInStorage) as T;\n  }\n\n  public tryGetObject<T>(key: string): T {\n    try {\n      return this.getObject<T>(key);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  public setObject(key: string, value: any): void {\n    this._itemSetSubject.next({\n      key,\n      value\n    });\n\n    this._setItemInStorage(key, JSON.stringify(value));\n  }\n\n  private _setItemInStorage(key: string, value: string) {\n    this._storageObject.setItem(key, value);\n  }\n}\n",
    "export class CoolServerStorage {\n  private _storageObject: any;\n\n  public constructor() {\n    this._storageObject = {};\n  }\n\n  public getItem(key: string): string {\n    return this._storageObject[key] || null;\n  }\n\n  public setItem(key: string, value: string): void {\n    this._storageObject[key] = value;\n  }\n\n  public removeItem(key: string): void {\n    this._storageObject[key] = undefined;\n  }\n\n  public key(index: number): string {\n    return this._storageObject.key(index);\n  }\n\n  public clear(): void {\n    this._storageObject = {};\n  }\n\n  public get length(): number {\n    return Object.keys(this._storageObject).length;\n  }\n}",
    "import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { CoolStorageBase } from './cool-storage-base';\nimport { CoolServerStorage } from './cool-server-storage';\n\n@Injectable()\nexport class CoolLocalStorage extends CoolStorageBase {\n  constructor(@Inject(PLATFORM_ID) platformId: any) {\n    if (isPlatformBrowser(platformId)) {\n      super(window.localStorage, 'LocalStorage');\n    } else {\n      super(new CoolServerStorage(), 'LocalStorage');\n    }\n  }\n}\n",
    "import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { CoolStorageBase } from './cool-storage-base';\nimport { CoolServerStorage } from './cool-server-storage';\n\n@Injectable()\nexport class CoolSessionStorage extends CoolStorageBase {\n  constructor(@Inject(PLATFORM_ID) platformId: any) {\n    if (isPlatformBrowser(platformId)) {\n      super(window.sessionStorage, 'SessionStorage');\n    } else {\n      super(new CoolServerStorage(), 'SessionStorage');\n    }\n  }\n}\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CoolLocalStorage } from './cool-local-storage';\nimport { CoolSessionStorage } from './cool-session-storage';\n\n@NgModule({\n  providers: [\n    CoolLocalStorage,\n    CoolSessionStorage\n  ]\n})\nexport class CoolStorageModule {\n  /** @deprecated */\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: CoolStorageModule,\n      providers: []\n    };\n  }\n}\n"
  ],
  "names": [
    "CoolStorageBase",
    "storageObject",
    "storageObjectName",
    "Error",
    "this",
    "_storageObject",
    "_itemSetSubject",
    "Subject",
    "_itemRemovedSubject",
    "get",
    "Object",
    "defineProperty",
    "prototype",
    "enumerable",
    "getItem",
    "key",
    "value",
    "_setItemInStorage",
    "removeItem",
    "currentValue",
    "tryGetObject",
    "length",
    "configurable",
    "getObject",
    "jsonInStorage",
    "JSON",
    "parse",
    "e",
    "setObject",
    "next",
    "CoolServerStorage",
    "setItem",
    "undefined",
    "index",
    "clear",
    "CoolLocalStorage",
    "platformId",
    "isPlatformBrowser",
    "_super",
    "call",
    "window",
    "localStorage",
    "CoolSessionStorage",
    "sessionStorage",
    "CoolStorageModule",
    "forRoot",
    "ngModule",
    "decorators",
    "type",
    "NgModule",
    "args",
    "providers"
  ],
  "mappings": "6bAGA,IAAAA,EAAA,WAKE,SAAFA,EAA0CC,EAA1CC,GACI,IAAKD,EACH,MAAM,IAAIE,MAAM,oCAAtBD,GAGIE,KAAKC,eAAiBJ,EAEtBG,KAAKE,gBAAkB,IAAIC,EAAAA,QAC3BH,KAAKI,oBAAsB,IAAID,EAAAA,sEAI/BE,IAAJ,uFAIAC,OAAAC,eAAAX,EAAAY,UAAA,wBAAA,gEAIIC,YAAY,oBAGPb,EAATY,UAAAE,QAAA,SAAAC,GACI,OAAJX,KAAAC,eAAAS,QAAAC,IAAA,yEAQAC,MAAAA,IAGIZ,KAAKa,kBAATF,EAAAC,IAOAhB,EAAAY,UAAAM,WAAA,SAAAH,GAEI,IAAJI,EAAwCf,KAAxCgB,aAAAL,+DAGAC,MAAAG,4MAaIV,IAAJ,WAEQ,OAARL,KAAAC,eAAAgB,QAEAR,YAAA,EAEIS,cAAJ,IAGStB,EAA2BY,UAApCW,UAAA,SAAAR,GACI,IAAJS,EAAApB,KAAAU,QAAAC,GACA,OAAA,OAAMS,EACN,KACAC,KAAAC,MAAAF,yCAIA,IACQ,OAARpB,KAAAmB,UAA8BR,GAE9B,MAAAY,GACA,OAAA,OAKU3B,EAAVY,UAAAgB,UAAA,SAAAb,EAAAC,GACIZ,KAAKE,gBAATuB,KAAA,OAEAb,MAAAA,iIA9FA,GCHAc,EAAA,wBAII1B,KAAKC,eAAiB,UAGjByB,EAATlB,UAAAE,QAAA,SAAAC,GACI,OAAOX,KAAKC,eAAeU,IAAQ,MAG9Be,EAAkClB,UAA3CmB,QAAA,SAAAhB,EAAAC,GACIZ,KAAKC,eAAeU,GAAOC,GAGtBc,EAATlB,UAAAM,WAAA,SAAAH,GACIX,KAAKC,eAAeU,GAAOiB,WAGtBF,EAATlB,UAAAG,IAAA,SAAAkB,GACI,OAAO7B,KAAKC,eAAeU,IAAIkB,IAG1BH,EAATlB,UAAAsB,MAAA,WACI9B,KAAKC,eAAiB,gDAItBI,IAAJ,6FA5BA,iBCUA,SAAA0B,EAAAC,GAJA,OAKAC,EAAAA,kBAAAD,GACAE,EAAAC,KAAAnC,KAAAoC,OAAAC,aAAqD,iBAArDrC,2EAJA+B,6JCEA,SAAAO,EAAAN,GAJA,OAKAC,EAAAA,kBAAAD,GACAE,EAAAC,KAAAnC,KAAAoC,OAAAG,eAAuD,mBAAvDvC,6EAJAsC,2ICRA,IAUAE,EAAA,yBANA,OAUAA,EAAgBC,QAAhB,WACA,MAAA,CACAC,SAAAF,iBAZAA,EAMA,GAJAA,EACAG,WAAA,CACA,CAAAC,KAAAC,EAAAA,SAAAC,KAAA,CAAA,CACAC,UAAA"
}
