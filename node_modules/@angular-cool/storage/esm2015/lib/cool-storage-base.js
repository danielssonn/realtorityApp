/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Subject } from 'rxjs';
/**
 * @abstract
 */
export class CoolStorageBase {
    /**
     * @param {?} storageObject
     * @param {?} storageObjectName
     */
    constructor(storageObject, storageObjectName) {
        if (!storageObject) {
            throw new Error(`Current browser does not support ${storageObjectName}`);
        }
        this._storageObject = storageObject;
        this._itemSetSubject = new Subject();
        this._itemRemovedSubject = new Subject();
    }
    /**
     * @return {?}
     */
    get itemSetObservable() {
        return this._itemSetSubject.asObservable();
    }
    /**
     * @return {?}
     */
    get itemRemovedObservable() {
        return this._itemRemovedSubject.asObservable();
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getItem(key) {
        return this._storageObject.getItem(key) || null;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setItem(key, value) {
        this._itemSetSubject.next({
            key,
            value
        });
        this._setItemInStorage(key, value);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeItem(key) {
        let /** @type {?} */ currentValue = this.tryGetObject(key);
        if (!currentValue) {
            currentValue = this.getItem(key);
        }
        this._itemRemovedSubject.next({
            key,
            value: currentValue
        });
        this._storageObject.removeItem(key);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    key(index) {
        return this._storageObject.key(index);
    }
    /**
     * @return {?}
     */
    clear() {
        this._storageObject.clear();
    }
    /**
     * @return {?}
     */
    get length() {
        return this._storageObject.length;
    }
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    getObject(key) {
        let /** @type {?} */ jsonInStorage = this.getItem(key);
        if (jsonInStorage === null) {
            return null;
        }
        return /** @type {?} */ (JSON.parse(jsonInStorage));
    }
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    tryGetObject(key) {
        try {
            return this.getObject(key);
        }
        catch (/** @type {?} */ e) {
            return null;
        }
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setObject(key, value) {
        this._itemSetSubject.next({
            key,
            value
        });
        this._setItemInStorage(key, JSON.stringify(value));
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    _setItemInStorage(key, value) {
        this._storageObject.setItem(key, value);
    }
}
function CoolStorageBase_tsickle_Closure_declarations() {
    /** @type {?} */
    CoolStorageBase.prototype._storageObject;
    /** @type {?} */
    CoolStorageBase.prototype._itemSetSubject;
    /** @type {?} */
    CoolStorageBase.prototype._itemRemovedSubject;
}
//# sourceMappingURL=cool-storage-base.js.map
