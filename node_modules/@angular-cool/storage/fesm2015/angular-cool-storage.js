import { Subject } from 'rxjs';
import { Injectable, Inject, PLATFORM_ID, NgModule } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class CoolStorageBase {
    /**
     * @param {?} storageObject
     * @param {?} storageObjectName
     */
    constructor(storageObject, storageObjectName) {
        if (!storageObject) {
            throw new Error(`Current browser does not support ${storageObjectName}`);
        }
        this._storageObject = storageObject;
        this._itemSetSubject = new Subject();
        this._itemRemovedSubject = new Subject();
    }
    /**
     * @return {?}
     */
    get itemSetObservable() {
        return this._itemSetSubject.asObservable();
    }
    /**
     * @return {?}
     */
    get itemRemovedObservable() {
        return this._itemRemovedSubject.asObservable();
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getItem(key) {
        return this._storageObject.getItem(key) || null;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setItem(key, value) {
        this._itemSetSubject.next({
            key,
            value
        });
        this._setItemInStorage(key, value);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeItem(key) {
        let /** @type {?} */ currentValue = this.tryGetObject(key);
        if (!currentValue) {
            currentValue = this.getItem(key);
        }
        this._itemRemovedSubject.next({
            key,
            value: currentValue
        });
        this._storageObject.removeItem(key);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    key(index) {
        return this._storageObject.key(index);
    }
    /**
     * @return {?}
     */
    clear() {
        this._storageObject.clear();
    }
    /**
     * @return {?}
     */
    get length() {
        return this._storageObject.length;
    }
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    getObject(key) {
        let /** @type {?} */ jsonInStorage = this.getItem(key);
        if (jsonInStorage === null) {
            return null;
        }
        return /** @type {?} */ (JSON.parse(jsonInStorage));
    }
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    tryGetObject(key) {
        try {
            return this.getObject(key);
        }
        catch (/** @type {?} */ e) {
            return null;
        }
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setObject(key, value) {
        this._itemSetSubject.next({
            key,
            value
        });
        this._setItemInStorage(key, JSON.stringify(value));
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    _setItemInStorage(key, value) {
        this._storageObject.setItem(key, value);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CoolServerStorage {
    constructor() {
        this._storageObject = {};
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getItem(key) {
        return this._storageObject[key] || null;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setItem(key, value) {
        this._storageObject[key] = value;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeItem(key) {
        this._storageObject[key] = undefined;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    key(index) {
        return this._storageObject.key(index);
    }
    /**
     * @return {?}
     */
    clear() {
        this._storageObject = {};
    }
    /**
     * @return {?}
     */
    get length() {
        return Object.keys(this._storageObject).length;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CoolLocalStorage extends CoolStorageBase {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        if (isPlatformBrowser(platformId)) {
            super(window.localStorage, 'LocalStorage');
        }
        else {
            super(new CoolServerStorage(), 'LocalStorage');
        }
    }
}
CoolLocalStorage.decorators = [
    { type: Injectable },
];
/** @nocollapse */
CoolLocalStorage.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CoolSessionStorage extends CoolStorageBase {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        if (isPlatformBrowser(platformId)) {
            super(window.sessionStorage, 'SessionStorage');
        }
        else {
            super(new CoolServerStorage(), 'SessionStorage');
        }
    }
}
CoolSessionStorage.decorators = [
    { type: Injectable },
];
/** @nocollapse */
CoolSessionStorage.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CoolStorageModule {
    /**
     * @deprecated
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: CoolStorageModule,
            providers: []
        };
    }
}
CoolStorageModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    CoolLocalStorage,
                    CoolSessionStorage
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { CoolLocalStorage, CoolSessionStorage, CoolStorageModule, CoolStorageBase as Éµa };
//# sourceMappingURL=angular-cool-storage.js.map
