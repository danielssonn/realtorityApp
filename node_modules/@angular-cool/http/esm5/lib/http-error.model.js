import * as tslib_1 from "tslib";
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var HttpError = /** @class */ (function (_super) {
    tslib_1.__extends(HttpError, _super);
    /**
     * @param {?} method
     * @param {?} url
     * @param {?} status
     * @param {?} statusText
     * @param {?} body
     */
    function HttpError(method, url, status, statusText, body) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, "Failed to call api " + method + " " + url + ", status code: " + status) || this;
        _this.method = method;
        _this.url = url;
        _this.status = status;
        _this.statusText = statusText;
        _this.body = body;
        // Set the prototype explicitly.
        Object.setPrototypeOf(_this, _newTarget.prototype);
        return _this;
    }
    return HttpError;
}(Error));
export { HttpError };
function HttpError_tsickle_Closure_declarations() {
    /** @type {?} */
    HttpError.prototype.method;
    /** @type {?} */
    HttpError.prototype.url;
    /** @type {?} */
    HttpError.prototype.status;
    /** @type {?} */
    HttpError.prototype.statusText;
    /** @type {?} */
    HttpError.prototype.body;
}
//# sourceMappingURL=http-error.model.js.map
