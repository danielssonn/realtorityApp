import * as tslib_2 from "tslib";
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { HttpHeader } from './http-header.model';
import { CookieStore } from './cookie-store.service';
import { HttpError } from './http-error.model';
import { DEFAULT_REQUEST_OPTIONS } from './request-options.interface';
import { from } from 'rxjs';
/**
 * @record
 * @template T, T1, T2, TResult
 */
export function Func() { }
function Func_tsickle_Closure_declarations() {
    /* TODO: handle strange member:
    (item: T, item1: T1, item2: T2): TResult;
    */
}
var CoolHttp = /** @class */ (function () {
    /**
     * @param {?} _http
     */
    function CoolHttp(_http) {
        this._http = _http;
        this._cookieStore = new CookieStore();
        this._globalHeaders = [];
        this._requestInterceptors = [];
        this._responseInterceptors = [];
        this._customCookieToHeaders = [];
    }
    Object.defineProperty(CoolHttp.prototype, "baseUrl", {
        /**
         * @return {?}
         */
        get: function () {
            return this._baseUrl;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} baseUrl
     * @return {?}
     */
    CoolHttp.prototype.registerBaseUrl = function (baseUrl) {
        this._baseUrl = baseUrl;
        if (this._baseUrl[this._baseUrl.length - 1] !== '/') {
            this._baseUrl += '/';
        }
    };
    /**
     * @return {?}
     */
    CoolHttp.prototype.deRegisterBaseUrl = function () {
        this._baseUrl = null;
    };
    /**
     * @param {?} status
     * @return {?}
     */
    CoolHttp.prototype.setWithCredentials = function (status) {
        this._withCredentials = status;
    };
    /**
     * @param {?} header
     * @return {?}
     */
    CoolHttp.prototype.registerGlobalHeader = function (header) {
        this.deregisterGlobalHeader(header.key);
        this._globalHeaders.push(header);
    };
    /**
     * @return {?}
     */
    CoolHttp.prototype.getGlobalHeaders = function () {
        return this._globalHeaders;
    };
    /**
     * @param {?} headerKey
     * @return {?}
     */
    CoolHttp.prototype.deregisterGlobalHeader = function (headerKey) {
        var /** @type {?} */ indexOfHeader = this._globalHeaders.findIndex(function (header) { return header.key === headerKey; });
        if (indexOfHeader === -1) {
            return false;
        }
        this._globalHeaders.splice(indexOfHeader, 1);
        return true;
    };
    /**
     * @return {?}
     */
    CoolHttp.prototype.removeAllRegisteredGlobalHeaders = function () {
        this._globalHeaders.length = 0;
    };
    /**
     * @param {?} requestInterceptor
     * @return {?}
     */
    CoolHttp.prototype.registerRequestInterceptor = function (requestInterceptor) {
        this._requestInterceptors.push(requestInterceptor);
    };
    /**
     * @param {?} requestInterceptor
     * @return {?}
     */
    CoolHttp.prototype.deregisterRequestInterceptor = function (requestInterceptor) {
        var /** @type {?} */ indexOfItem = this._requestInterceptors.indexOf(requestInterceptor);
        if (indexOfItem === -1) {
            return false;
        }
        this._requestInterceptors.splice(indexOfItem, 1);
        return true;
    };
    /**
     * @param {?} responseInterceptor
     * @return {?}
     */
    CoolHttp.prototype.registerResponseInterceptor = function (responseInterceptor) {
        this._responseInterceptors.push(responseInterceptor);
    };
    /**
     * @param {?} responseInterceptor
     * @return {?}
     */
    CoolHttp.prototype.deregisterResponseInterceptor = function (responseInterceptor) {
        var /** @type {?} */ indexOfItem = this._responseInterceptors.indexOf(responseInterceptor);
        if (indexOfItem === -1) {
            return false;
        }
        this._responseInterceptors.splice(indexOfItem, 1);
        return true;
    };
    /**
     * @param {?} cookieName
     * @param {?} customHeaderName
     * @return {?}
     */
    CoolHttp.prototype.sendCookieValueInCustomHeader = function (cookieName, customHeaderName) {
        this._customCookieToHeaders.push({
            cookieName: cookieName,
            customHeaderName: customHeaderName
        });
    };
    /**
     * @template T
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    CoolHttp.prototype.getAsync = function (url, options) {
        if (options === void 0) { options = DEFAULT_REQUEST_OPTIONS; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var that;
            return tslib_2.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        that = this;
                        return [4 /*yield*/, that._requestCoreAsync(url, 'GET', null, options, function (url, data, modOptions) {
                                return that._http.get(url, modOptions);
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @template T
     * @param {?} url
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    CoolHttp.prototype.postAsync = function (url, data, options) {
        if (options === void 0) { options = DEFAULT_REQUEST_OPTIONS; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var that;
            return tslib_2.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        that = this;
                        return [4 /*yield*/, that._requestCoreAsync(url, 'POST', data, options, function (url, data, modOptions) {
                                return that._http.post(url, data, modOptions);
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @template T
     * @param {?} url
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    CoolHttp.prototype.putAsync = function (url, data, options) {
        if (options === void 0) { options = DEFAULT_REQUEST_OPTIONS; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var that;
            return tslib_2.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        that = this;
                        return [4 /*yield*/, that._requestCoreAsync(url, 'PUT', data, options, function (url, data, modOptions) {
                                return that._http.put(url, data, modOptions);
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @template T
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    CoolHttp.prototype.deleteAsync = function (url, options) {
        if (options === void 0) { options = DEFAULT_REQUEST_OPTIONS; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var that;
            return tslib_2.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        that = this;
                        return [4 /*yield*/, that._requestCoreAsync(url, 'DELETE', null, options, function (url, data, modOptions) {
                                return that._http['delete'](url, modOptions);
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @template T
     * @param {?} url
     * @param {?=} data
     * @param {?=} options
     * @return {?}
     */
    CoolHttp.prototype.patchAsync = function (url, data, options) {
        if (options === void 0) { options = DEFAULT_REQUEST_OPTIONS; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var that;
            return tslib_2.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        that = this;
                        return [4 /*yield*/, that._requestCoreAsync(url, 'PATCH', data, options, function (url, data, modOptions) {
                                return that._http.patch(url, data, modOptions);
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @template T
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    CoolHttp.prototype.headAsync = function (url, options) {
        if (options === void 0) { options = DEFAULT_REQUEST_OPTIONS; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var that;
            return tslib_2.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        that = this;
                        return [4 /*yield*/, that._requestCoreAsync(url, 'HEAD', null, options, function (url, data, modOptions) {
                                return that._http.head(url, modOptions);
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @template T
     * @param {?} url
     * @param {?} method
     * @param {?} data
     * @param {?} options
     * @param {?} action
     * @return {?}
     */
    CoolHttp.prototype._requestCoreAsync = function (url, method, data, options, action) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var modifiedOptions, clientHeaders, shouldIntercept, response, errorResponse_1, returnValue;
            return tslib_2.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this._convertUrl(url);
                        modifiedOptions = this._modifyOptions(options);
                        clientHeaders = this._convertAngularHeadersToHttpClientHeaders(/** @type {?} */ (modifiedOptions.headers));
                        return [4 /*yield*/, this._invokeRequestInterceptorsAsync(url, method, data, clientHeaders)];
                    case 1:
                        shouldIntercept = _a.sent();
                        if (shouldIntercept) {
                            return [2 /*return*/];
                        }
                        modifiedOptions.headers = this._updateAngularHeadersFromHttpClientHeaders(clientHeaders, /** @type {?} */ (modifiedOptions.headers));
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, action(url, data, modifiedOptions).toPromise()];
                    case 3:
                        response = _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        errorResponse_1 = _a.sent();
                        response = errorResponse_1;
                        return [3 /*break*/, 5];
                    case 5: return [4 /*yield*/, this._invokeResponseInterceptorsAsync(response, url, method, data, clientHeaders)];
                    case 6:
                        shouldIntercept = _a.sent();
                        if (shouldIntercept) {
                            return [2 /*return*/];
                        }
                        if (!response.ok) {
                            throw new HttpError(method, url, response.status, response.statusText, JSON.stringify(response.body));
                        }
                        try {
                            returnValue = JSON.parse(response.body);
                        }
                        catch ( /** @type {?} */e) {
                            returnValue = { data: response.body };
                        }
                        return [2 /*return*/, /** @type {?} */ (returnValue)];
                }
            });
        });
    };
    /**
     * @template T
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    CoolHttp.prototype.getObservable = function (url, options) {
        if (options === void 0) { options = DEFAULT_REQUEST_OPTIONS; }
        var /** @type {?} */ that = this;
        return that._requestCoreObservable(url, 'GET', null, options, function (url, data, modOptions) {
            return that._http.get(url, modOptions);
        });
    };
    /**
     * @template T
     * @param {?} url
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    CoolHttp.prototype.postObservable = function (url, data, options) {
        if (options === void 0) { options = DEFAULT_REQUEST_OPTIONS; }
        var /** @type {?} */ that = this;
        return that._requestCoreObservable(url, 'POST', data, options, function (url, data, modOptions) {
            return that._http.post(url, data, modOptions);
        });
    };
    /**
     * @template T
     * @param {?} url
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    CoolHttp.prototype.putObservable = function (url, data, options) {
        if (options === void 0) { options = DEFAULT_REQUEST_OPTIONS; }
        var /** @type {?} */ that = this;
        return that._requestCoreObservable(url, 'PUT', data, options, function (url, data, modOptions) {
            return that._http.put(url, data, modOptions);
        });
    };
    /**
     * @template T
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    CoolHttp.prototype.deleteObservable = function (url, options) {
        if (options === void 0) { options = DEFAULT_REQUEST_OPTIONS; }
        var /** @type {?} */ that = this;
        return that._requestCoreObservable(url, 'DELETE', null, options, function (url, data, modOptions) {
            return that._http['delete'](url, modOptions);
        });
    };
    /**
     * @template T
     * @param {?} url
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    CoolHttp.prototype.patchObservable = function (url, data, options) {
        if (options === void 0) { options = DEFAULT_REQUEST_OPTIONS; }
        var /** @type {?} */ that = this;
        return that._requestCoreObservable(url, 'PATCH', data, options, function (url, data, modOptions) {
            return that._http.patch(url, data, modOptions);
        });
    };
    /**
     * @template T
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    CoolHttp.prototype.headObservable = function (url, options) {
        if (options === void 0) { options = DEFAULT_REQUEST_OPTIONS; }
        var /** @type {?} */ that = this;
        return that._requestCoreObservable(url, 'HEAD', null, options, function (url, data, modOptions) {
            return that._http.head(url, modOptions);
        });
    };
    /**
     * @template T
     * @param {?} url
     * @param {?} method
     * @param {?} data
     * @param {?} options
     * @param {?} action
     * @return {?}
     */
    CoolHttp.prototype._requestCoreObservable = function (url, method, data, options, action) {
        return from(this._requestCoreAsync(url, method, data, options, action));
    };
    /**
     * @param {?} url
     * @return {?}
     */
    CoolHttp.prototype._convertUrl = function (url) {
        var /** @type {?} */ returnUrl = url;
        if (this._baseUrl) {
            returnUrl = this._baseUrl + returnUrl;
        }
        return returnUrl;
    };
    /**
     * @param {?} options
     * @return {?}
     */
    CoolHttp.prototype._modifyOptions = function (options) {
        var /** @type {?} */ resultOptions = {
            headers: options.headers || new HttpHeaders(),
            observe: 'response',
            params: options.params,
            reportProgress: options.reportProgress,
            responseType: 'text',
            withCredentials: options.withCredentials || this._withCredentials,
        };
        options.headers = options.headers || new HttpHeaders();
        resultOptions.headers = this._appendGlobalHeaders(/** @type {?} */ (resultOptions.headers));
        resultOptions.headers = this._tryAppendRegisteredCookiesToCustomHeaders(/** @type {?} */ (resultOptions.headers));
        return resultOptions;
    };
    /**
     * @param {?} headers
     * @return {?}
     */
    CoolHttp.prototype._appendGlobalHeaders = function (headers) {
        var e_1, _a;
        var /** @type {?} */ newHeaders = headers;
        try {
            for (var _b = tslib_2.__values(this._globalHeaders), _c = _b.next(); !_c.done; _c = _b.next()) {
                var registeredHeader = _c.value;
                newHeaders = headers.set(registeredHeader.key, registeredHeader.value);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return newHeaders;
    };
    /**
     * @param {?} headers
     * @return {?}
     */
    CoolHttp.prototype._tryAppendRegisteredCookiesToCustomHeaders = function (headers) {
        var e_2, _a;
        var /** @type {?} */ newHeaders = headers;
        try {
            for (var _b = tslib_2.__values(this._customCookieToHeaders), _c = _b.next(); !_c.done; _c = _b.next()) {
                var cookieToHeader = _c.value;
                var /** @type {?} */ cookieValue = this._cookieStore.getCookie(cookieToHeader.cookieName);
                if (cookieValue) {
                    newHeaders = headers.set(cookieToHeader.customHeaderName, cookieValue);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return newHeaders;
    };
    /**
     * @param {?} url
     * @param {?} method
     * @param {?} data
     * @param {?} headers
     * @return {?}
     */
    CoolHttp.prototype._invokeRequestInterceptorsAsync = function (url, method, data, headers) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_3, _a, _b, _c, requestInterceptor, shouldIntercept, e_3_1;
            return tslib_2.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 5, 6, 7]);
                        _b = tslib_2.__values(this._requestInterceptors), _c = _b.next();
                        _d.label = 1;
                    case 1:
                        if (!!_c.done) return [3 /*break*/, 4];
                        requestInterceptor = _c.value;
                        return [4 /*yield*/, requestInterceptor.beforeRequestAsync(url, method, data, headers)];
                    case 2:
                        shouldIntercept = _d.sent();
                        if (shouldIntercept) {
                            return [2 /*return*/, true];
                        }
                        _d.label = 3;
                    case 3:
                        _c = _b.next();
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        e_3_1 = _d.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 7];
                    case 6:
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_3) throw e_3.error; }
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/, false];
                }
            });
        });
    };
    /**
     * @param {?} response
     * @param {?} url
     * @param {?} method
     * @param {?} data
     * @param {?} headers
     * @return {?}
     */
    CoolHttp.prototype._invokeResponseInterceptorsAsync = function (response, url, method, data, headers) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_4, _a, _b, _c, responseInterceptor, shouldIntercept, e_4_1;
            return tslib_2.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 5, 6, 7]);
                        _b = tslib_2.__values(this._responseInterceptors), _c = _b.next();
                        _d.label = 1;
                    case 1:
                        if (!!_c.done) return [3 /*break*/, 4];
                        responseInterceptor = _c.value;
                        return [4 /*yield*/, responseInterceptor.afterResponseAsync(response, url, method, data, headers)];
                    case 2:
                        shouldIntercept = _d.sent();
                        if (shouldIntercept) {
                            return [2 /*return*/, true];
                        }
                        _d.label = 3;
                    case 3:
                        _c = _b.next();
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        e_4_1 = _d.sent();
                        e_4 = { error: e_4_1 };
                        return [3 /*break*/, 7];
                    case 6:
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_4) throw e_4.error; }
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/, false];
                }
            });
        });
    };
    /**
     * @param {?} headers
     * @return {?}
     */
    CoolHttp.prototype._convertAngularHeadersToHttpClientHeaders = function (headers) {
        return headers.keys().map(function (headerKey) {
            var /** @type {?} */ httpClientHeader = new HttpHeader();
            httpClientHeader.key = headerKey;
            httpClientHeader.value = headers.get(headerKey);
            return httpClientHeader;
        });
    };
    /**
     * @param {?} httpClientHeaders
     * @param {?} headers
     * @return {?}
     */
    CoolHttp.prototype._updateAngularHeadersFromHttpClientHeaders = function (httpClientHeaders, headers) {
        var e_5, _a;
        var /** @type {?} */ newHeaders = headers;
        try {
            for (var httpClientHeaders_1 = tslib_2.__values(httpClientHeaders), httpClientHeaders_1_1 = httpClientHeaders_1.next(); !httpClientHeaders_1_1.done; httpClientHeaders_1_1 = httpClientHeaders_1.next()) {
                var clientHeader = httpClientHeaders_1_1.value;
                var /** @type {?} */ headerValue = headers.get(clientHeader.key);
                if (headerValue !== clientHeader.value) {
                    newHeaders = headers.set(clientHeader.key, clientHeader.value);
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (httpClientHeaders_1_1 && !httpClientHeaders_1_1.done && (_a = httpClientHeaders_1.return)) _a.call(httpClientHeaders_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return newHeaders;
    };
    return CoolHttp;
}());
export { CoolHttp };
CoolHttp.decorators = [
    { type: Injectable },
];
/** @nocollapse */
CoolHttp.ctorParameters = function () { return [
    { type: HttpClient, },
]; };
function CoolHttp_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    CoolHttp.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    CoolHttp.ctorParameters;
    /** @type {?} */
    CoolHttp.prototype._cookieStore;
    /** @type {?} */
    CoolHttp.prototype._globalHeaders;
    /** @type {?} */
    CoolHttp.prototype._requestInterceptors;
    /** @type {?} */
    CoolHttp.prototype._responseInterceptors;
    /** @type {?} */
    CoolHttp.prototype._customCookieToHeaders;
    /** @type {?} */
    CoolHttp.prototype._baseUrl;
    /** @type {?} */
    CoolHttp.prototype._withCredentials;
    /** @type {?} */
    CoolHttp.prototype._http;
}
//# sourceMappingURL=cool-http.service.js.map
