{
  "version": 3,
  "file": "angular-cool-http.umd.min.js",
  "sources": [
    "ng://@angular-cool/http/projects/http/src/lib/cookie-store.service.ts",
    "ng://@angular-cool/http/projects/http/src/lib/http-header.model.ts",
    "ng://@angular-cool/http/projects/http/src/lib/http-error.model.ts",
    "ng://@angular-cool/http/projects/http/src/lib/request-options.interface.ts",
    "ng://@angular-cool/http/projects/http/src/lib/cool-http.service.ts",
    "ng://@angular-cool/http/projects/http/src/lib/cool-http.module.ts"
  ],
  "sourcesContent": [
    "export class CookieStore {\n  lastReadRawCookieCollection: string;\n\n  lastReadCookieCollection: any;\n\n  public getCookie(key: string): string {\n    let cookieCollection = this.getCookieCollection();\n\n    return cookieCollection[key];\n  }\n\n  public getCookieCollection(): any {\n    let currentRawCookie = document.cookie;\n\n    if (currentRawCookie === this.lastReadRawCookieCollection) {\n      return this.lastReadCookieCollection;\n    }\n\n    this.lastReadRawCookieCollection = currentRawCookie;\n    this.lastReadCookieCollection = {};\n\n    if (this.lastReadRawCookieCollection.indexOf('; ') !== -1) {\n      let cookies = this.lastReadRawCookieCollection.split('; ');\n\n      for (let cookie of cookies) {\n        let indexOfEqualSign = cookie.indexOf('=');\n\n        if (indexOfEqualSign > 0) {\n          let cookieName = CookieStore.tryDecodeUriComponent(cookie.substring(0, indexOfEqualSign));\n\n          this.lastReadCookieCollection[cookieName] = CookieStore.tryDecodeUriComponent(cookie.substring(indexOfEqualSign + 1));\n        }\n      }\n    }\n\n    return this.lastReadCookieCollection;\n  }\n\n  private static tryDecodeUriComponent(uriComponent: string): string {\n    try {\n      return decodeURIComponent(uriComponent);\n    }\n    catch (e) {\n      return uriComponent;\n    }\n  }\n}",
    "export class HttpHeader {\n  key: string;\n\n  value: string;\n\n  constructor(key?: string, value?: string) {\n    this.key = key;\n    this.value = value;\n  }\n}",
    "export class HttpError extends Error {\n  constructor(public method: string,\n              public url: string,\n              public status: number,\n              public statusText: string,\n              public body: string) {\n    super(`Failed to call api ${method} ${url}, status code: ${status}`);\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}",
    "import { HttpHeaders, HttpParams } from '@angular/common/http';\n\nexport interface RequestOptions {\n  headers?: HttpHeaders | {\n    [header: string]: string | string[];\n  };\n  params?: HttpParams | {\n    [param: string]: string | string[];\n  };\n  reportProgress?: boolean;\n  withCredentials?: boolean;\n}\n\nexport const DEFAULT_REQUEST_OPTIONS: RequestOptions = {};\n",
    "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\n\nimport { HttpHeader } from './http-header.model';\nimport { CookieStore } from './cookie-store.service';\nimport { IRequestInterceptor } from './request-interceptor.interface';\nimport { IResponseInterceptor } from './response-interceptor.interface';\nimport { HttpError } from './http-error.model';\nimport { DEFAULT_REQUEST_OPTIONS, RequestOptions } from './request-options.interface';\nimport { from, Observable } from 'rxjs';\nimport { AngularRequestOptions } from './angular-request-options.interface';\n\nexport interface Func<T, T1, T2, TResult> {\n  (item: T, item1: T1, item2: T2): TResult;\n}\n\n@Injectable()\nexport class CoolHttp {\n  private _cookieStore: CookieStore = new CookieStore();\n\n  private _globalHeaders: HttpHeader[] = [];\n  private _requestInterceptors: IRequestInterceptor[] = [];\n  private _responseInterceptors: IResponseInterceptor[] = [];\n  private _customCookieToHeaders = [];\n  private _baseUrl;\n  private _withCredentials;\n\n  constructor(private _http: HttpClient) {\n  }\n\n  public get baseUrl(): string {\n    return this._baseUrl;\n  }\n\n  public registerBaseUrl(baseUrl: string): void {\n    this._baseUrl = baseUrl;\n\n    if (this._baseUrl[this._baseUrl.length - 1] !== '/') {\n      this._baseUrl += '/';\n    }\n  }\n\n  public deRegisterBaseUrl(): void {\n    this._baseUrl = null;\n  }\n\n  public setWithCredentials(status: boolean): void {\n    this._withCredentials = status;\n  }\n\n  public registerGlobalHeader(header: HttpHeader): void {\n    this.deregisterGlobalHeader(header.key);\n\n    this._globalHeaders.push(header);\n  }\n\n  public getGlobalHeaders(): HttpHeader[] {\n    return this._globalHeaders;\n  }\n\n  public deregisterGlobalHeader(headerKey: string): boolean {\n    const indexOfHeader = this._globalHeaders.findIndex(header => header.key === headerKey);\n\n    if (indexOfHeader === -1) {\n      return false;\n    }\n\n    this._globalHeaders.splice(indexOfHeader, 1);\n\n    return true;\n  }\n\n  public removeAllRegisteredGlobalHeaders(): void {\n    this._globalHeaders.length = 0;\n  }\n\n  public registerRequestInterceptor(requestInterceptor: IRequestInterceptor): void {\n    this._requestInterceptors.push(requestInterceptor);\n  }\n\n  public deregisterRequestInterceptor(requestInterceptor: IRequestInterceptor): boolean {\n    let indexOfItem = this._requestInterceptors.indexOf(requestInterceptor);\n\n    if (indexOfItem === -1) {\n      return false;\n    }\n\n    this._requestInterceptors.splice(indexOfItem, 1);\n\n    return true;\n  }\n\n  public registerResponseInterceptor(responseInterceptor: IResponseInterceptor): void {\n    this._responseInterceptors.push(responseInterceptor);\n  }\n\n  public deregisterResponseInterceptor(responseInterceptor: IResponseInterceptor): boolean {\n    let indexOfItem = this._responseInterceptors.indexOf(responseInterceptor);\n\n    if (indexOfItem === -1) {\n      return false;\n    }\n\n    this._responseInterceptors.splice(indexOfItem, 1);\n\n    return true;\n  }\n\n  public sendCookieValueInCustomHeader(cookieName: string, customHeaderName: string): void {\n    this._customCookieToHeaders.push({\n      cookieName: cookieName,\n      customHeaderName: customHeaderName\n    });\n  }\n\n  public async getAsync<T = any>(url: string, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Promise<T> {\n    let that = this;\n\n    return await that._requestCoreAsync<T>(url, 'GET', null, options, (url, data, modOptions) => {\n      return that._http.get(url, modOptions);\n    });\n  }\n\n  public async postAsync<T = any>(url: string, data?: any, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Promise<T> {\n    let that = this;\n\n    return await that._requestCoreAsync<T>(url, 'POST', data, options, (url, data, modOptions) => {\n      return that._http.post(url, data, modOptions);\n    });\n  }\n\n  public async putAsync<T = any>(url: string, data?: any, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Promise<T> {\n    let that = this;\n\n    return await that._requestCoreAsync<T>(url, 'PUT', data, options, (url, data, modOptions) => {\n      return that._http.put(url, data, modOptions);\n    });\n  }\n\n  public async deleteAsync<T = any>(url: string, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Promise<T> {\n    let that = this;\n\n    return await that._requestCoreAsync<T>(url, 'DELETE', null, options, (url, data, modOptions) => {\n      return that._http['delete'](url, modOptions);\n    });\n  }\n\n  public async patchAsync<T = any>(url: string, data?: any, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Promise<T> {\n    let that = this;\n\n    return await that._requestCoreAsync<T>(url, 'PATCH', data, options, (url, data, modOptions) => {\n      return that._http.patch(url, data, modOptions);\n    });\n  }\n\n  public async headAsync<T = any>(url: string, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Promise<T> {\n    let that = this;\n\n    return await that._requestCoreAsync<T>(url, 'HEAD', null, options, (url, data, modOptions) => {\n      return that._http.head(url, modOptions);\n    });\n  }\n\n  private async _requestCoreAsync<T = any>(url: string, method: string, data: any, options: RequestOptions, action: Func<string, any, AngularRequestOptions, Observable<HttpResponse<string>>>): Promise<T> {\n    url = this._convertUrl(url);\n\n    const modifiedOptions = this._modifyOptions(options);\n\n    let clientHeaders = this._convertAngularHeadersToHttpClientHeaders(<HttpHeaders>modifiedOptions.headers);\n\n    let shouldIntercept = await this._invokeRequestInterceptorsAsync(url, method, data, clientHeaders);\n\n    if (shouldIntercept) {\n      return;\n    }\n\n    modifiedOptions.headers = this._updateAngularHeadersFromHttpClientHeaders(clientHeaders, <HttpHeaders>modifiedOptions.headers);\n\n    let response: HttpResponse<string>;\n\n    try {\n      response = await action(url, data, modifiedOptions).toPromise();\n    } catch (errorResponse) {\n      response = errorResponse;\n    }\n\n    shouldIntercept = await this._invokeResponseInterceptorsAsync(response, url, method, data, clientHeaders);\n\n    if (shouldIntercept) {\n      return;\n    }\n\n    if (!response.ok) {\n      throw new HttpError(method, url, response.status, response.statusText, JSON.stringify(response.body));\n    }\n\n    let returnValue;\n\n    try {\n      returnValue = JSON.parse(response.body);\n    } catch (e) {\n      returnValue = {data: response.body};\n    }\n\n    return <T>returnValue;\n  }\n\n  public getObservable<T = any>(url: string, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Observable<T> {\n    let that = this;\n\n    return that._requestCoreObservable<T>(url, 'GET', null, options, (url, data, modOptions) => {\n      return that._http.get(url, modOptions);\n    });\n  }\n\n  public postObservable<T = any>(url: string, data: any, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Observable<T> {\n    let that = this;\n\n    return that._requestCoreObservable<T>(url, 'POST', data, options, (url, data, modOptions) => {\n      return that._http.post(url, data, modOptions);\n    });\n  }\n\n  public putObservable<T = any>(url: string, data: any, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Observable<T> {\n    let that = this;\n\n    return that._requestCoreObservable<T>(url, 'PUT', data, options, (url, data, modOptions) => {\n      return that._http.put(url, data, modOptions);\n    });\n  }\n\n  public deleteObservable<T = any>(url: string, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Observable<T> {\n    let that = this;\n\n    return that._requestCoreObservable<T>(url, 'DELETE', null, options, (url, data, modOptions) => {\n      return that._http['delete'](url, modOptions);\n    });\n  }\n\n  public patchObservable<T = any>(url: string, data: any, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Observable<T> {\n    let that = this;\n\n    return that._requestCoreObservable<T>(url, 'PATCH', data, options, (url, data, modOptions) => {\n      return that._http.patch(url, data, modOptions);\n    });\n  }\n\n  public headObservable<T = any>(url: string, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Observable<T> {\n    let that = this;\n\n    return that._requestCoreObservable<T>(url, 'HEAD', null, options, (url, data, modOptions) => {\n      return that._http.head(url, modOptions);\n    });\n  }\n\n  private _requestCoreObservable<T = any>(url: string, method: string, data: any, options: RequestOptions, action: Func<string, any, AngularRequestOptions, Observable<HttpResponse<string>>>): Observable<T> {\n    return from(this._requestCoreAsync(url, method, data, options, action));\n  }\n\n  private _convertUrl(url: string) {\n    let returnUrl = url;\n\n    if (this._baseUrl) {\n      returnUrl = this._baseUrl + returnUrl;\n    }\n\n    return returnUrl;\n  }\n\n  private _modifyOptions(options: RequestOptions): AngularRequestOptions {\n    const resultOptions: AngularRequestOptions = {\n      headers: options.headers || new HttpHeaders(),\n      observe: 'response',\n      params: options.params,\n      reportProgress: options.reportProgress,\n      responseType: 'text',\n      withCredentials: options.withCredentials || this._withCredentials,\n    };\n\n    options.headers = options.headers || new HttpHeaders();\n\n    resultOptions.headers = this._appendGlobalHeaders(<HttpHeaders>resultOptions.headers);\n\n    resultOptions.headers = this._tryAppendRegisteredCookiesToCustomHeaders(<HttpHeaders>resultOptions.headers);\n\n    return resultOptions;\n  }\n\n  private _appendGlobalHeaders(headers: HttpHeaders): HttpHeaders {\n    let newHeaders = headers;\n\n    for (const registeredHeader of this._globalHeaders) {\n      newHeaders = headers.set(registeredHeader.key, registeredHeader.value);\n    }\n\n    return newHeaders;\n  }\n\n  private _tryAppendRegisteredCookiesToCustomHeaders(headers: HttpHeaders): HttpHeaders {\n    let newHeaders = headers;\n\n    for (const cookieToHeader of this._customCookieToHeaders) {\n      const cookieValue = this._cookieStore.getCookie(cookieToHeader.cookieName);\n\n      if (cookieValue) {\n        newHeaders = headers.set(cookieToHeader.customHeaderName, cookieValue);\n      }\n    }\n\n    return newHeaders;\n  }\n\n  private async _invokeRequestInterceptorsAsync(url: string, method: string, data: any, headers: HttpHeader[]): Promise<boolean> {\n    for (const requestInterceptor of this._requestInterceptors) {\n      const shouldIntercept = await requestInterceptor.beforeRequestAsync(url, method, data, headers);\n\n      if (shouldIntercept) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private async _invokeResponseInterceptorsAsync(response: HttpResponse<Object>, url: string, method: string, data: any, headers: HttpHeader[]): Promise<boolean> {\n    for (const responseInterceptor of this._responseInterceptors) {\n      const shouldIntercept = await responseInterceptor.afterResponseAsync(response, url, method, data, headers);\n\n      if (shouldIntercept) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private _convertAngularHeadersToHttpClientHeaders(headers: HttpHeaders): HttpHeader[] {\n    return headers.keys().map(headerKey => {\n      const httpClientHeader = new HttpHeader();\n\n      httpClientHeader.key = headerKey;\n      httpClientHeader.value = headers.get(headerKey);\n\n      return httpClientHeader;\n    });\n  }\n\n  private _updateAngularHeadersFromHttpClientHeaders(httpClientHeaders: HttpHeader[], headers: HttpHeaders): HttpHeaders {\n    let newHeaders = headers;\n\n    for (const clientHeader of httpClientHeaders) {\n      const headerValue = headers.get(clientHeader.key);\n\n      if (headerValue !== clientHeader.value) {\n        newHeaders = headers.set(clientHeader.key, clientHeader.value);\n      }\n    }\n\n    return newHeaders;\n  }\n}\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { CoolHttp } from './cool-http.service';\n\n@NgModule({\n  exports: [],\n  imports: [HttpClientModule],\n  providers: [CoolHttp]\n})\nexport class CoolHttpModule {\n  /** @deprecated */\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: CoolHttpModule,\n      providers: []\n    };\n  }\n}\n"
  ],
  "names": [
    "CookieStore",
    "prototype",
    "getCookieCollection",
    "e_1",
    "_a",
    "currentRawCookie",
    "document",
    "cookie",
    "this",
    "lastReadRawCookieCollection",
    "lastReadCookieCollection",
    "indexOf",
    "cookies",
    "split",
    "cookies_1",
    "tslib_1.__values",
    "cookies_1_1",
    "next",
    "done",
    "value",
    "indexOfEqualSign",
    "e_1_1",
    "error",
    "return",
    "call",
    "HttpHeader",
    "key",
    "HttpError",
    "method",
    "url",
    "status",
    "statusText",
    "body",
    "_newTarget",
    "constructor",
    "_this",
    "_super",
    "DEFAULT_REQUEST_OPTIONS",
    "CoolHttp",
    "_http",
    "_cookieStore",
    "_globalHeaders",
    "_requestInterceptors",
    "_responseInterceptors",
    "_customCookieToHeaders",
    "push",
    "header",
    "deregisterGlobalHeader",
    "headerKey",
    "indexOfHeader",
    "findIndex",
    "deregisterRequestInterceptor",
    "requestInterceptor",
    "indexOfItem",
    "deregisterResponseInterceptor",
    "responseInterceptor",
    "getAsync",
    "options",
    "tslib_1.__awaiter",
    "tslib_2.__generator",
    "label",
    "that",
    "_requestCoreAsync",
    "data",
    "modOptions",
    "sent",
    "deleteAsync",
    "patchAsync",
    "patch",
    "headAsync",
    "action",
    "modifiedOptions",
    "clientHeaders",
    "response",
    "errorResponse_1",
    "returnValue",
    "headers",
    "_updateAngularHeadersFromHttpClientHeaders",
    "_invokeResponseInterceptorsAsync",
    "e",
    "getObservable",
    "_requestCoreObservable",
    "put",
    "deleteObservable",
    "_modifyOptions",
    "resultOptions",
    "HttpHeaders",
    "_appendGlobalHeaders",
    "_tryAppendRegisteredCookiesToCustomHeaders",
    "_b",
    "tslib_2.__values",
    "_c",
    "registeredHeader",
    "newHeaders",
    "set",
    "CoolHttpModule",
    "forRoot",
    "ngModule",
    "decorators",
    "type",
    "NgModule",
    "args"
  ],
  "mappings": "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"
}
