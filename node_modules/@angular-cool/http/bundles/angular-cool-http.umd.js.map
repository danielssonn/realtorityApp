{
  "version": 3,
  "file": "angular-cool-http.umd.js",
  "sources": [
    "ng://@angular-cool/http/projects/http/src/lib/cool-http.module.ts",
    "ng://@angular-cool/http/projects/http/src/lib/cool-http.service.ts",
    "ng://@angular-cool/http/projects/http/src/lib/request-options.interface.ts",
    "ng://@angular-cool/http/projects/http/src/lib/http-error.model.ts",
    "ng://@angular-cool/http/projects/http/src/lib/http-header.model.ts",
    "ng://@angular-cool/http/projects/http/src/lib/cookie-store.service.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { CoolHttp } from './cool-http.service';\n\n@NgModule({\n  exports: [],\n  imports: [HttpClientModule],\n  providers: [CoolHttp]\n})\nexport class CoolHttpModule {\n  /** @deprecated */\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: CoolHttpModule,\n      providers: []\n    };\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\n\nimport { HttpHeader } from './http-header.model';\nimport { CookieStore } from './cookie-store.service';\nimport { IRequestInterceptor } from './request-interceptor.interface';\nimport { IResponseInterceptor } from './response-interceptor.interface';\nimport { HttpError } from './http-error.model';\nimport { DEFAULT_REQUEST_OPTIONS, RequestOptions } from './request-options.interface';\nimport { from, Observable } from 'rxjs';\nimport { AngularRequestOptions } from './angular-request-options.interface';\n\nexport interface Func<T, T1, T2, TResult> {\n  (item: T, item1: T1, item2: T2): TResult;\n}\n\n@Injectable()\nexport class CoolHttp {\n  private _cookieStore: CookieStore = new CookieStore();\n\n  private _globalHeaders: HttpHeader[] = [];\n  private _requestInterceptors: IRequestInterceptor[] = [];\n  private _responseInterceptors: IResponseInterceptor[] = [];\n  private _customCookieToHeaders = [];\n  private _baseUrl;\n  private _withCredentials;\n\n  constructor(private _http: HttpClient) {\n  }\n\n  public get baseUrl(): string {\n    return this._baseUrl;\n  }\n\n  public registerBaseUrl(baseUrl: string): void {\n    this._baseUrl = baseUrl;\n\n    if (this._baseUrl[this._baseUrl.length - 1] !== '/') {\n      this._baseUrl += '/';\n    }\n  }\n\n  public deRegisterBaseUrl(): void {\n    this._baseUrl = null;\n  }\n\n  public setWithCredentials(status: boolean): void {\n    this._withCredentials = status;\n  }\n\n  public registerGlobalHeader(header: HttpHeader): void {\n    this.deregisterGlobalHeader(header.key);\n\n    this._globalHeaders.push(header);\n  }\n\n  public getGlobalHeaders(): HttpHeader[] {\n    return this._globalHeaders;\n  }\n\n  public deregisterGlobalHeader(headerKey: string): boolean {\n    const indexOfHeader = this._globalHeaders.findIndex(header => header.key === headerKey);\n\n    if (indexOfHeader === -1) {\n      return false;\n    }\n\n    this._globalHeaders.splice(indexOfHeader, 1);\n\n    return true;\n  }\n\n  public removeAllRegisteredGlobalHeaders(): void {\n    this._globalHeaders.length = 0;\n  }\n\n  public registerRequestInterceptor(requestInterceptor: IRequestInterceptor): void {\n    this._requestInterceptors.push(requestInterceptor);\n  }\n\n  public deregisterRequestInterceptor(requestInterceptor: IRequestInterceptor): boolean {\n    let indexOfItem = this._requestInterceptors.indexOf(requestInterceptor);\n\n    if (indexOfItem === -1) {\n      return false;\n    }\n\n    this._requestInterceptors.splice(indexOfItem, 1);\n\n    return true;\n  }\n\n  public registerResponseInterceptor(responseInterceptor: IResponseInterceptor): void {\n    this._responseInterceptors.push(responseInterceptor);\n  }\n\n  public deregisterResponseInterceptor(responseInterceptor: IResponseInterceptor): boolean {\n    let indexOfItem = this._responseInterceptors.indexOf(responseInterceptor);\n\n    if (indexOfItem === -1) {\n      return false;\n    }\n\n    this._responseInterceptors.splice(indexOfItem, 1);\n\n    return true;\n  }\n\n  public sendCookieValueInCustomHeader(cookieName: string, customHeaderName: string): void {\n    this._customCookieToHeaders.push({\n      cookieName: cookieName,\n      customHeaderName: customHeaderName\n    });\n  }\n\n  public async getAsync<T = any>(url: string, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Promise<T> {\n    let that = this;\n\n    return await that._requestCoreAsync<T>(url, 'GET', null, options, (url, data, modOptions) => {\n      return that._http.get(url, modOptions);\n    });\n  }\n\n  public async postAsync<T = any>(url: string, data?: any, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Promise<T> {\n    let that = this;\n\n    return await that._requestCoreAsync<T>(url, 'POST', data, options, (url, data, modOptions) => {\n      return that._http.post(url, data, modOptions);\n    });\n  }\n\n  public async putAsync<T = any>(url: string, data?: any, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Promise<T> {\n    let that = this;\n\n    return await that._requestCoreAsync<T>(url, 'PUT', data, options, (url, data, modOptions) => {\n      return that._http.put(url, data, modOptions);\n    });\n  }\n\n  public async deleteAsync<T = any>(url: string, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Promise<T> {\n    let that = this;\n\n    return await that._requestCoreAsync<T>(url, 'DELETE', null, options, (url, data, modOptions) => {\n      return that._http['delete'](url, modOptions);\n    });\n  }\n\n  public async patchAsync<T = any>(url: string, data?: any, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Promise<T> {\n    let that = this;\n\n    return await that._requestCoreAsync<T>(url, 'PATCH', data, options, (url, data, modOptions) => {\n      return that._http.patch(url, data, modOptions);\n    });\n  }\n\n  public async headAsync<T = any>(url: string, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Promise<T> {\n    let that = this;\n\n    return await that._requestCoreAsync<T>(url, 'HEAD', null, options, (url, data, modOptions) => {\n      return that._http.head(url, modOptions);\n    });\n  }\n\n  private async _requestCoreAsync<T = any>(url: string, method: string, data: any, options: RequestOptions, action: Func<string, any, AngularRequestOptions, Observable<HttpResponse<string>>>): Promise<T> {\n    url = this._convertUrl(url);\n\n    const modifiedOptions = this._modifyOptions(options);\n\n    let clientHeaders = this._convertAngularHeadersToHttpClientHeaders(<HttpHeaders>modifiedOptions.headers);\n\n    let shouldIntercept = await this._invokeRequestInterceptorsAsync(url, method, data, clientHeaders);\n\n    if (shouldIntercept) {\n      return;\n    }\n\n    modifiedOptions.headers = this._updateAngularHeadersFromHttpClientHeaders(clientHeaders, <HttpHeaders>modifiedOptions.headers);\n\n    let response: HttpResponse<string>;\n\n    try {\n      response = await action(url, data, modifiedOptions).toPromise();\n    } catch (errorResponse) {\n      response = errorResponse;\n    }\n\n    shouldIntercept = await this._invokeResponseInterceptorsAsync(response, url, method, data, clientHeaders);\n\n    if (shouldIntercept) {\n      return;\n    }\n\n    if (!response.ok) {\n      throw new HttpError(method, url, response.status, response.statusText, JSON.stringify(response.body));\n    }\n\n    let returnValue;\n\n    try {\n      returnValue = JSON.parse(response.body);\n    } catch (e) {\n      returnValue = {data: response.body};\n    }\n\n    return <T>returnValue;\n  }\n\n  public getObservable<T = any>(url: string, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Observable<T> {\n    let that = this;\n\n    return that._requestCoreObservable<T>(url, 'GET', null, options, (url, data, modOptions) => {\n      return that._http.get(url, modOptions);\n    });\n  }\n\n  public postObservable<T = any>(url: string, data: any, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Observable<T> {\n    let that = this;\n\n    return that._requestCoreObservable<T>(url, 'POST', data, options, (url, data, modOptions) => {\n      return that._http.post(url, data, modOptions);\n    });\n  }\n\n  public putObservable<T = any>(url: string, data: any, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Observable<T> {\n    let that = this;\n\n    return that._requestCoreObservable<T>(url, 'PUT', data, options, (url, data, modOptions) => {\n      return that._http.put(url, data, modOptions);\n    });\n  }\n\n  public deleteObservable<T = any>(url: string, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Observable<T> {\n    let that = this;\n\n    return that._requestCoreObservable<T>(url, 'DELETE', null, options, (url, data, modOptions) => {\n      return that._http['delete'](url, modOptions);\n    });\n  }\n\n  public patchObservable<T = any>(url: string, data: any, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Observable<T> {\n    let that = this;\n\n    return that._requestCoreObservable<T>(url, 'PATCH', data, options, (url, data, modOptions) => {\n      return that._http.patch(url, data, modOptions);\n    });\n  }\n\n  public headObservable<T = any>(url: string, options: RequestOptions = DEFAULT_REQUEST_OPTIONS): Observable<T> {\n    let that = this;\n\n    return that._requestCoreObservable<T>(url, 'HEAD', null, options, (url, data, modOptions) => {\n      return that._http.head(url, modOptions);\n    });\n  }\n\n  private _requestCoreObservable<T = any>(url: string, method: string, data: any, options: RequestOptions, action: Func<string, any, AngularRequestOptions, Observable<HttpResponse<string>>>): Observable<T> {\n    return from(this._requestCoreAsync(url, method, data, options, action));\n  }\n\n  private _convertUrl(url: string) {\n    let returnUrl = url;\n\n    if (this._baseUrl) {\n      returnUrl = this._baseUrl + returnUrl;\n    }\n\n    return returnUrl;\n  }\n\n  private _modifyOptions(options: RequestOptions): AngularRequestOptions {\n    const resultOptions: AngularRequestOptions = {\n      headers: options.headers || new HttpHeaders(),\n      observe: 'response',\n      params: options.params,\n      reportProgress: options.reportProgress,\n      responseType: 'text',\n      withCredentials: options.withCredentials || this._withCredentials,\n    };\n\n    options.headers = options.headers || new HttpHeaders();\n\n    resultOptions.headers = this._appendGlobalHeaders(<HttpHeaders>resultOptions.headers);\n\n    resultOptions.headers = this._tryAppendRegisteredCookiesToCustomHeaders(<HttpHeaders>resultOptions.headers);\n\n    return resultOptions;\n  }\n\n  private _appendGlobalHeaders(headers: HttpHeaders): HttpHeaders {\n    let newHeaders = headers;\n\n    for (const registeredHeader of this._globalHeaders) {\n      newHeaders = headers.set(registeredHeader.key, registeredHeader.value);\n    }\n\n    return newHeaders;\n  }\n\n  private _tryAppendRegisteredCookiesToCustomHeaders(headers: HttpHeaders): HttpHeaders {\n    let newHeaders = headers;\n\n    for (const cookieToHeader of this._customCookieToHeaders) {\n      const cookieValue = this._cookieStore.getCookie(cookieToHeader.cookieName);\n\n      if (cookieValue) {\n        newHeaders = headers.set(cookieToHeader.customHeaderName, cookieValue);\n      }\n    }\n\n    return newHeaders;\n  }\n\n  private async _invokeRequestInterceptorsAsync(url: string, method: string, data: any, headers: HttpHeader[]): Promise<boolean> {\n    for (const requestInterceptor of this._requestInterceptors) {\n      const shouldIntercept = await requestInterceptor.beforeRequestAsync(url, method, data, headers);\n\n      if (shouldIntercept) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private async _invokeResponseInterceptorsAsync(response: HttpResponse<Object>, url: string, method: string, data: any, headers: HttpHeader[]): Promise<boolean> {\n    for (const responseInterceptor of this._responseInterceptors) {\n      const shouldIntercept = await responseInterceptor.afterResponseAsync(response, url, method, data, headers);\n\n      if (shouldIntercept) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private _convertAngularHeadersToHttpClientHeaders(headers: HttpHeaders): HttpHeader[] {\n    return headers.keys().map(headerKey => {\n      const httpClientHeader = new HttpHeader();\n\n      httpClientHeader.key = headerKey;\n      httpClientHeader.value = headers.get(headerKey);\n\n      return httpClientHeader;\n    });\n  }\n\n  private _updateAngularHeadersFromHttpClientHeaders(httpClientHeaders: HttpHeader[], headers: HttpHeaders): HttpHeaders {\n    let newHeaders = headers;\n\n    for (const clientHeader of httpClientHeaders) {\n      const headerValue = headers.get(clientHeader.key);\n\n      if (headerValue !== clientHeader.value) {\n        newHeaders = headers.set(clientHeader.key, clientHeader.value);\n      }\n    }\n\n    return newHeaders;\n  }\n}\n",
    "import { HttpHeaders, HttpParams } from '@angular/common/http';\n\nexport interface RequestOptions {\n  headers?: HttpHeaders | {\n    [header: string]: string | string[];\n  };\n  params?: HttpParams | {\n    [param: string]: string | string[];\n  };\n  reportProgress?: boolean;\n  withCredentials?: boolean;\n}\n\nexport const DEFAULT_REQUEST_OPTIONS: RequestOptions = {};\n",
    "export class HttpError extends Error {\n  constructor(public method: string,\n              public url: string,\n              public status: number,\n              public statusText: string,\n              public body: string) {\n    super(`Failed to call api ${method} ${url}, status code: ${status}`);\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}",
    "export class HttpHeader {\n  key: string;\n\n  value: string;\n\n  constructor(key?: string, value?: string) {\n    this.key = key;\n    this.value = value;\n  }\n}",
    "export class CookieStore {\n  lastReadRawCookieCollection: string;\n\n  lastReadCookieCollection: any;\n\n  public getCookie(key: string): string {\n    let cookieCollection = this.getCookieCollection();\n\n    return cookieCollection[key];\n  }\n\n  public getCookieCollection(): any {\n    let currentRawCookie = document.cookie;\n\n    if (currentRawCookie === this.lastReadRawCookieCollection) {\n      return this.lastReadCookieCollection;\n    }\n\n    this.lastReadRawCookieCollection = currentRawCookie;\n    this.lastReadCookieCollection = {};\n\n    if (this.lastReadRawCookieCollection.indexOf('; ') !== -1) {\n      let cookies = this.lastReadRawCookieCollection.split('; ');\n\n      for (let cookie of cookies) {\n        let indexOfEqualSign = cookie.indexOf('=');\n\n        if (indexOfEqualSign > 0) {\n          let cookieName = CookieStore.tryDecodeUriComponent(cookie.substring(0, indexOfEqualSign));\n\n          this.lastReadCookieCollection[cookieName] = CookieStore.tryDecodeUriComponent(cookie.substring(indexOfEqualSign + 1));\n        }\n      }\n    }\n\n    return this.lastReadCookieCollection;\n  }\n\n  private static tryDecodeUriComponent(uriComponent: string): string {\n    try {\n      return decodeURIComponent(uriComponent);\n    }\n    catch (e) {\n      return uriComponent;\n    }\n  }\n}"
  ],
  "names": [
    "NgModule",
    "tslib_2.__values",
    "HttpHeaders",
    "tslib_2.__generator",
    "tslib_1.__awaiter",
    "tslib_1.__values"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;QKeA,WAAA,CAAA,SAAA,CAAA,mBAAA,GAA0C;YAC1C,IAAA,GAAA,EAAA,EAAA,CAAA;YAEI,qBAAJ,gBAAA,GAAA,QAAA,CAAA,MAAA,CAAA;YACI,IAAI,gBAAR,KAAA,IAAiC,CAAjC,2BAAA,EAAA;gBAEQ,OAAR,IAAA,CAAA,wBAAA,CAAA;aACA;YAEA,IAAM,CAAN,2BAAA,GAAA,gBAAA,CAAA;YACA,IAAA,CAAA,wBAAY,GAAZ,EAAA,CAAA;YAEA,IAAA,IAAQ,CAAR,2BAAA,CAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,EAAA;gBACA,qBAAA,OAAA,GAAA,IAAA,CAAA,2BAAA,CAAA,KAAA,CAAA,IAAA,CAA4D,CAAC;gBAE7D,IAAA;oBACA,KAAA,IAAA,SAAA,GAAAK,cAAA,CAAA,OAAA,CAAA,EAAA,WAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,CAAA,WAAA,CAAA,IAAA,EAAA,WAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA;wBACA,IAAA,MAAA,GAAA,WAAA,CAAA,KAAA,CAAA;wBACA,qBAAA,gBAAA,GAAA,MAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA;wBAEgB,IAAhB,gBAAA,GAAA,CAAwC,EAAxC;;;;;;gBAGA,OAAA,KAAA,EAAA;oBAAA,GAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,CAAA;iBAAA;wBACA;oBACA,IAAA;wBACA,IAAA,WAAA,IAAA,CAAA,WAAA,CAAA,IAAA,KAAA,EAAA,GAAA,SAAA,CAAA,MAAA,CAAA;4BAAA,EAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA;qBACA;4BACA;wBAAA,IAAA,GAAA;4BAAA,MAAA,GAAA,CAAA,KAAA,CAAA;qBAAA;iBACA;;YAEA,OAAA,IAAA,CAAA,wBAAA,CAAA;;;;;;;;;;;;;;;;;;;;AD9CA,QAAA,UAAA,kBAAA;;;;;QAKE,SAAF,UAAA,CAAA,GAAA,EAAA,KAAA;YACI,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;YACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACpB;QACH,OAAA,UAAA,CAAA;;;;;;;;;;;;;;;QDRA,SAAA,SAAqB,CAArB,MAAmC,EAAnC,GAAA,EAAA,MAAA,EAAA,UAAA,EAAA,IAAA;YACqB,IAArB,UAAwB,GAAxB,IAAA,CAAA,WAAA,CAAA;YACqB,IAArB,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,qBAAA,GAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,iBAAA,GAAA,MAAA,CAAA,IAAA,IAAA,CAAA;YACqB,KAArB,CAAA,MAAA,GAA+B,MAA/B,CAAA;YACqB,KAArB,CAAA,GAAyB,GAAJ,GAArB,CAAyB;;YAIrB,KAAJ,CAAU,UAAV,GAAA,UAAA,CAAA;YACA,KAAA,CAAA,IAAA,GAAA,IAAA,CAAA;;;;;;;;;;;QDGA,iBAAA,uBAAA,GAAA,EAAuD;;;;;QDcvD,SAAA,QAAsB,CAAtB,KAAuC;YATvC,IAAA,CAAA,KAAA,GAAA,KAAA,CAAA;YAEA,IAAA,CAAA,YAAA,GAAA,IAA2C,WAA3C,EAAA,CAAA;YACA,IAAA,CAAA,cAAA,GAAA,EAAA,CAAA;YACA,IAAA,CAAA,oBAAA,GAAA,EAAA,CAA4D;YAC5D,IAAA,CAAA,qBAAA,GAAA,EAAA,CAAqC;YAKrC,IAAA,CAAA,sBAAA,GAAA,EAAA,CAAA;;;;;;;;;;;SAMA,CAAA,CAAA;;;;;;;;;aAQA;SACA,CAAA;;;;;;SAGA,CAAA;;;;;;;SAIA,CAAA;;;;;;;YAMA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA;SACA,CAAA;;;;;;SAGA,CAAA;;;;;QAOA,QAAQ,CAAC,SAAT,CAAA,sBAAA,GAA4C,UAA5C,SAAA;YAEI,qBAAJ,aAAA,GAAA,IAAA,CAAA,cAAA,CAAA,SAAA,CAAA,UAAA,MAAA,IAAA,OAAA,MAAA,CAAA,GAAA,KAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;;;;YAGA,OAAA,IAAA,CAAA;SACA,CAAA;;;;;;SAGA,CAAA;;;;;;;SAIA,CAAA;;;;;QAOA,QAAQ,CAAC,SAAT,CAAA,4BAAA,GAAkD,UAAlD,kBAAA;YAEI,qBAAJ,WAAA,GAAA,IAAA,CAAA,oBAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;;;;;SAGA,CAAA;;;;;;;SAIA,CAAA;;;;;QAOA,QAAQ,CAAC,SAAT,CAAA,6BAAA,GAAmD,UAAnD,mBAAA;YAEI,qBAAJ,WAAA,GAAA,IAAA,CAAA,qBAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;QAeA,QAAA,CAAK,SAAL,CAAA,QAAA,GAAA,UAAA,GAAA,EAAA,OAAA;;;;;;;;;;;;iCAGA,CAAA,CAAA,CAAA;;qBACA;iBAEA,CAAA,CAAA;aACA,CAAA,CAAA;SACA,CAAA;;;;;;;;;;;;YAGA,OAAAD,eAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA;;gBACI,OAAJD,iBAAA,CAAA,IAAA,EAAoB,UAApB,EAAA;oBAEA,QAAA,EAAA,CAAA,KAAA;wBACA,KAAA,CAAA;4BACA,IAAA,GAAA,IAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;4BAW0D,OAA1D,CAAA,CAAA,YAAA,IAAA,CAAA,iBAAA,CAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,OAAA,EAAA,UAAA,GAAA,EAAA,IAAA,EAAA,UAAA;;iCACA,CAAA,CAAA,CAAA;wBAEA,KAAiB,CAAjB,EAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAgD,IAAhD,EAAA,CAAuD,CAAvD;qBACA;iBACK,CAAC,CAAC;;;;;;;;;QAGQ,QAAf,CAAwB,SAAxB,CAAA,WAAA,GAAA,UAAA,GAAA,EAAgG,OAAhG;;;;YACA,OAAAC,eAAA,CAAQ,IAAI,EAAZ,KAAmB,CAAC,EAApB,KAAA,CAAA,EAAA;gBAEI,IAAJ,IAAA,CAAA;gBACA,OAAAD,iBAA4B,CAAC,IAA7B,EAAA,UAA6C,EAA7C;oBACA,QAAA,EAAA,CAAA,KAAA;;;;;;;;;;;;;;;;;;QAYA,QAAI,CAAJ,SAAA,CAAA,UAAyB,GAAzB,UAAA,GAAA,EAAA,IAAA,EAAA,OAAA;YACA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;gBAAA,OAAA,GAAA,uBAAA,CAAA;aAAA;YACA,OAAAC,eAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA;gBAEI,IAAJ,IAAA,CAAA;gBAEI,OAAJD,iBAAA,CAAA,IAAA,EAAA,UAAA,EAAA;oBAEQ,QAAR,EAAA,CAAA,KAAA;wBACA,KAAA,CAAA;4BACA,IAAA,GAAA,IAAA,CAAA;4BAAA,OAAA,CAAA,CAAA,YAAA,IAA0B,CAA1B,iBAAA,CAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,OAAA,EAAA,UAAA,GAAA,EAAA,IAAA,EAAA,UAAA;oCACA,OAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,GAAA,EAAA,IAAA,EAAA,UAAA,CAAA,CAAA;iCACA,CAAA,CAAA,CAAA;wBAEA,KAAA,CAAA,EAAA,OAAA,CAA4B,CAA5B,aAAA,EAAA,CAAA,IAAA,EAAA,CAAA,CAAA;qBAEA;iBACA,CAAA,CAAA;aACA,CAAA,CAAA;SAEA,CAAA;;;;;;;QAQA,QAAM,CAAN,SAAA,CAAA,SAAA,GAAA,UAAA,GAAA,EAAA,OAAA;YACA,IAAA,OAAA,KAAA,KAAA,CAAoB,EAAC;gBAArB,OAAA,GAAA,uBAAA,CAAA;aAAA;YACA,OAAAC,eAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA;gBAEI,IAAJ,IAAA,CAAA;;;;;;;;;qBAGsB;iBACtB,CAAA,CAAA;aAEA,CAAA,CAAA;SACA,CAAA;;;;;;;;;;QAIS,QAAT,CAAA,SAA4C,CAA5C,iBAAmF,GAAnF,UAAA,GAAA,EAAA,MAAA,EAAA,IAAA,EAAA,OAAA,EAAA,MAAA;YACI,OAAJA,eAAA,CAAY,IAAZ,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA;gBAEA,IAAA,eAAA,EAAA,aAA6C,EAAE,eAA/C,EAAA,QAAA,EAA0E,eAA1E,EAAA,WAAA,CAAA;gBACM,OAAOD,iBAAmB,CAAhC,IAAA,EAAA,UAAA,EAAmD;oBACnD,QAAA,EAAA,CAAA,KAAA;;;;;;;;;gCAGA,OAAA,CAAA,CAAA,YAAA,CAAA;6BACA;4BAEA,eAAA,CAAA,OAAA,GAAA,IAAA,CAAsD,0CAAtD,CAAA,aAAA,oBAAA,eAAA,CAAA,OAAA,EAAA,CAAA;4BACkB,EAAlB,CAAA,KAAA,GAAA,CAAA,CAA+B;wBAC/B,KAAA,CAAA;;;;;;;;4BAG8C,QAA9C,GAAA,eAAA,CAAA;4BACA,OAAA,CAAA,CAAY,YAAZ,CAAA,CAAA,CAAA;wBAEgB,KAAhB,CAAA,EAAA,OAAA,CAAA,CAAA,YAAA,IAAA,CAAA,gCAAA,CAAA,QAA8F,EAAE,GAAhG,EAAA,MAAA,EAAA,IAAA,EAAA,aAAA,CAAA,CAAA,CAAA;wBACA,KAAA,CAAA;4BACA,eAAA,GAAA,EAAA,CAAA,IAAA,EAAA,CAAA;;;;;;;;;6BAG+C;4BAC/C,wBAAA,CAAA,EAAA;gCAEA,WAAA,GAAsC,EAAtC,IAA+C,EAA/C,QAAA,CAAA,IAA8D,EAA9D,CAAA;6BACA;4BACA,OAAA,CAAA,CAAA,+BAAA,WAAA,EAAA,CAAA;;;;;;;;;;;QAOA,QAAM,CAAN,SAAA,CAAiB,aAAjB,GAAA,UAAA,GAA8C,EAA9C,OAAA;YACA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;gBAAA,OAAA,GAAA,uBAAA,CAAA;aAAA;;;;;;;;;;;;;;;;;;;;aAOA,CAAA,CAAA;SACA,CAAA;;;;;;;;;;;;YASA,qBAAA,IAAA,GAAA,IAAA,CAAA;YACI,OAAJ,IAAA,CAAA,sBAAA,CAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,OAAA,EAAA,UAAA,GAAA,EAAA,IAAA,EAAA,UAAA;gBACM,OAAO,IAAb,CAAA,KAAuB,CAAvB,GAAA,CAAA,GAAA,EAAA,IAAA,EAAA,UAAiD,CAAjD,CAAmD;aACnD,CAAA,CAAA;SACA,CAAA;;;;;;;QAUA,QAAA,CAAA,SAAkB,CAAlB,gBAAA,GAAA,UAAA,GAAA,EAAA,OAAA;YAEI,IAAJ,OAAA,KAAA,KAAyB,CAAzB,EAAA;gBAAA,OAAA,GAAA,uBAAA,CAAA;aAAA;;;;;;;;;;;;;;;;;;;gBAaA,OAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,GAAA,EAAA,IAAA,EAAqD,UAArD,CAAA,CAAA;aACA,CAAA,CAAA;SAEA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;QAoBA,QAAI,CAAJ,SAAA,CAAA,sBAAA,GAAA,UAAA,GAAA,EAAA,MAAA,EAAA,IAAA,EAAA,OAAA,EAAA,MAAA;;;;;;;;;;;aAGA;;SACA,CAAA;;;;;QAMA,QAAA,CAAK,SAAL,CAAA,cAAA,GAAA,UAAA,OAAA;YAEA,qBAAA,aAAA,GAAA;;;;;;;aAGA,CAAA;YACI,OAAO,CAAX,OAAmB,GAAnB,OAA6B,CAAC,OAA9B,IAAA,IAAAD,gBAAA,EAAA,CAAA;YACA,aAAA,CAAA,OAAA,GAAA,IAAA,CAAA,oBAAA,mBAAA,aAAA,CAAA,OAAA,EAAA,CAAA;YAEA,aAAA,CAAA,OAAuB,GAAG,IAA1B,CAAA,0CAAA,mBAAA,aAAA,CAAA,OAAA,EAAA,CAAA;YACA,OAAA,aAAsB,CAAC;SAEvB,CAAA;;;;;;;;YAIA,IAAA;gBACA,KAAA,IAAA,EAAA,GAAAD,cAAqB,CAArB,IAAA,CAAA,cAAA,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA;oBAEA,IAAA,gBAAe,GAAf,EAAA,CAAA,KAAA,CAA2B;oBAC3B,UAAA,GAAA,OAAA,CAAA,GAAA,CAAA,gBAAkC,CAAlC,GAAsC,EAAtC,gBAAwD,CAAxD,KAAA,CAAA,CAAA;iBAEA;aACA;YACA,OAAA,KAAA,EAAA;gBAAA,GAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,CAAA;aAAA;oBACA;gBAEA,IAAA;;;;;;;;aAtVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ADhBA,QAUA,cAAA,kBAAA;;;;;;;QAIA,cAAA,CAAA,OAAA,GAAA;YACA,OAAA;gBACA,QAAA,EAAA,cAAA;;;;QAXA,OAAA,cAAA,CAAA;IACA,CAAA,EAAA,CAAA,CAAA;IACA,cACA,CAAA,UAAW,GAAG;QACd,EAAA,IAAA,EAAAD,aAAA,EAAA,IAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;"
}
