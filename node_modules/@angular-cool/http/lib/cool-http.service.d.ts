import { HttpClient } from '@angular/common/http';
import { HttpHeader } from './http-header.model';
import { IRequestInterceptor } from './request-interceptor.interface';
import { IResponseInterceptor } from './response-interceptor.interface';
import { RequestOptions } from './request-options.interface';
import { Observable } from 'rxjs';
export interface Func<T, T1, T2, TResult> {
    (item: T, item1: T1, item2: T2): TResult;
}
export declare class CoolHttp {
    private _http;
    private _cookieStore;
    private _globalHeaders;
    private _requestInterceptors;
    private _responseInterceptors;
    private _customCookieToHeaders;
    private _baseUrl;
    private _withCredentials;
    constructor(_http: HttpClient);
    readonly baseUrl: string;
    registerBaseUrl(baseUrl: string): void;
    deRegisterBaseUrl(): void;
    setWithCredentials(status: boolean): void;
    registerGlobalHeader(header: HttpHeader): void;
    getGlobalHeaders(): HttpHeader[];
    deregisterGlobalHeader(headerKey: string): boolean;
    removeAllRegisteredGlobalHeaders(): void;
    registerRequestInterceptor(requestInterceptor: IRequestInterceptor): void;
    deregisterRequestInterceptor(requestInterceptor: IRequestInterceptor): boolean;
    registerResponseInterceptor(responseInterceptor: IResponseInterceptor): void;
    deregisterResponseInterceptor(responseInterceptor: IResponseInterceptor): boolean;
    sendCookieValueInCustomHeader(cookieName: string, customHeaderName: string): void;
    getAsync<T = any>(url: string, options?: RequestOptions): Promise<T>;
    postAsync<T = any>(url: string, data?: any, options?: RequestOptions): Promise<T>;
    putAsync<T = any>(url: string, data?: any, options?: RequestOptions): Promise<T>;
    deleteAsync<T = any>(url: string, options?: RequestOptions): Promise<T>;
    patchAsync<T = any>(url: string, data?: any, options?: RequestOptions): Promise<T>;
    headAsync<T = any>(url: string, options?: RequestOptions): Promise<T>;
    private _requestCoreAsync;
    getObservable<T = any>(url: string, options?: RequestOptions): Observable<T>;
    postObservable<T = any>(url: string, data: any, options?: RequestOptions): Observable<T>;
    putObservable<T = any>(url: string, data: any, options?: RequestOptions): Observable<T>;
    deleteObservable<T = any>(url: string, options?: RequestOptions): Observable<T>;
    patchObservable<T = any>(url: string, data: any, options?: RequestOptions): Observable<T>;
    headObservable<T = any>(url: string, options?: RequestOptions): Observable<T>;
    private _requestCoreObservable;
    private _convertUrl;
    private _modifyOptions;
    private _appendGlobalHeaders;
    private _tryAppendRegisteredCookiesToCustomHeaders;
    private _invokeRequestInterceptorsAsync;
    private _invokeResponseInterceptorsAsync;
    private _convertAngularHeadersToHttpClientHeaders;
    private _updateAngularHeadersFromHttpClientHeaders;
}
